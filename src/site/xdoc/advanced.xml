<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties>
		<title>R-OSGi - transparent OSGi remote extension for distributed services - Smart Proxies</title>
		<author email="rellermeyer_AT_inf.ethz.ch">Jan S. Rellermeyer</author>
	</properties>
	<meta name="keyword" content="Advanced, OSGi, R-OSGi, rosgi, remote, remoting, Java, J2ME, embedded systems, Event, Service, EventAdmin, Remote Event, RemoteEvent, SLP, Remote services, service discovery"/>
	<meta name="description" content="Advanced R-OSGi examples. R-OSGi provides a transparent way to access services on remote OSGi service platforms. Additionally, it implements OSGi R4 EventAdmin service and is able to send RemoteEvents to other peers. It uses jSLP, the pure Java SLP implementation as underlying discovery protocol. Smart proxies:"/>
	<meta http-equiv="cache-control" content="no-cache"/>
	<meta http-equiv="pragma" content="no-cache"/>
	<meta http-equiv="robots" content="index, follow"/>
	<body>
		<section name="THIS PAGE IS OUTDATED (reflects the 0.6.5 version) AND NEEDS A MAJOR REVISION"/>
		<section name="Advanced R-OSGi">
			<p>
			For reasons of saving service provider's resources or to have client dependent code parts, services can register smart proxies. These are 
			abstract classes that implement the service interface and can have additional methods. The service consuming platform uses smart proxies during
			proxy bundle generation and leaves all implemented (i.e. not abstract) methods untouched. Abstract methods are implemented with remote 
			method invocations. 
		</p>
			<p>
			It is e.g. possible to have a method that returns an attribute of the local framework or that uses a local service instead of redirecting the
			invocation to the service provider. Implemented methods can themselves use every abstract or implemented method of the abstract class. R-OSGi 
			injects all classes into the bundle that are references within the service interface (i.e., as method parameter) or within the code of the 
			smart proxy class, if they were not imported by the original bundle. For 
			more sophisticated applications, it is possible to inject additional classes into the proxy bundle. This is also useful, for instance, if methods have
			interfaces as formal parameter and the developer wants to provide an implementation of the interface (which is not part of the execution environment). 
			By this, it can be avoided that the bundle makes too much assumptions about the presence of certain implementation of interfaces. 
		</p>
			<subsection name="Smart proxy example">
				<p>
		ServiceInterface:
<source>			
package ch.ethz.iks.r_osgi.sample.api;

public interface ServiceInterface {

	public String echoService(final String message, final Integer count);

	public String reverseService(final String message);

	public boolean equalsRemote(Object other);

	public void printRemote(int i, float f);

	public void zero();

	public void local();

}
</source>

		ServiceImpl:
<source>			
package ch.ethz.iks.r_osgi.sample.service;

import ch.ethz.iks.r_osgi.sample.api.ServiceInterface;

/**
 * just a simple sample service plays around with strings
 */
public final class ServiceImpl implements ServiceInterface {

	public String echoService(final String message, final Integer count) {
		StringBuffer buffer = new StringBuffer();
		final int c = count.intValue();
		for (int i = 0; i &lt; c; i++) {
			buffer.append(message);
			if (i &lt; c - 1) {
				buffer.append(" | ");
			}
		}
		return buffer.toString();
	}

	public String reverseService(String message) {
		return new StringBuffer().append(message).reverse().toString();
	}

	public void local() {
		System.out.println("Server: local called");
		throw new RuntimeException("Local cannot be called remotely");
	}

	public void zero() {
		System.out.println("Server: zero called.");
	}

	public boolean equalsRemote(Object other) {
		return equals(other);
	}

	public void printRemote(int i, float f) {
		System.out.println("i is " + i);
		System.out.println("f is " + f);
	}
}
</source>

					<br/>
		SmartService:
<source>			
package ch.ethz.iks.r_osgi.sample.service;

import ch.ethz.iks.r_osgi.sample.api.ServiceInterface;

public abstract class SmartService implements ServiceInterface {

	public abstract String echoService(String message, Integer count);

	public abstract String reverseService(String message);

	public abstract boolean equalsRemote(Object other);

	public void local() {
		System.out.println("Local invocation");
		zero();
	}

	public abstract void printRemote(int i, float f);

	public abstract void zero();

	public boolean equals(Object obj) {
		System.out.println("checking for equality");
		if (!obj.equals(this)) {
			return equalsRemote(obj);
		} else {
			return true;
		}
	}
}</source>
					<br/>
		Registration by whiteboard pattern:
<source>
(...)

Dictionary properties = new Hashtable();
properties.put(RemoteOSGiService.R_OSGi_REGISTRATION, SERVICE_PROXY_POLICY);
properties.put(RemoteOSGiService.SMART_PROXY, SmartService.class.getName());

context.registerService(ServiceInterface.class.getName(), new ServiceImpl(), properties);

(...)
</source>
</p>
</subsection>
			<subsection name="Handling of existing services">
			<p>
			This way of registering services for remote access is still a bit invasive. It requires to alter the part of the code
			which registers the service (typically, the BundleActivator). To deal with existing bundles, there is an alternative 
			way of registering services for remote access through an external surrogate service:
<source>
public class Activator implements BundleActivator, SurrogateRegistration {

	public void start(BundleContext context) throws Exception {

		final Hashtable properties = new Hashtable();
		properties.put(RemoteOSGiService.R_OSGi_REGISTRATION,
				RemoteOSGiService.SERVICE_PROXY_POLICY);
		properties.put(RemoteOSGiService.SMART_PROXY, SmartService.class
				.getName());		
				
		final ServiceReference legacyService = context.getServiceReference(ServiceInterface.class.getName());		
		properties.put(SurrogateRegistration.SERVICE_REFERENCE, legacyService);
		
		context.registerService(SurrogateRegistration.class.getName(), this, properties);

	}
	
...

}
	
</source>	
			Thus, the existing service (in the above example, it is a <code>ServiceImpl</code> registered as <code>ServiceInterface</code> service)
			remains unchanged and the registration is performed through a surrogate that can reside in a different bundle serving as adapter between 
			the legacy application and the remote world. 
		</p>
		</subsection>
		</section>
	</body>
</document>
