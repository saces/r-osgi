<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
		<title>R-OSGi - transparent OSGi remote extension for distributed services - What's new</title>
    <author email="rellermeyer_AT_inf.ethz.ch">Jan S. Rellermeyer</author>
  </properties>
	<meta name="keyword" content="Projects, using, OSGi, R-OSGi, rosgi, remote, remoting, Java, J2ME, embedded systems, Event, Service, EventAdmin, Remote Event, RemoteEvent, SLP, Remote services, service discovery"/>
	<meta name="description" content="R-OSGi provides a transparent way to access services on remote OSGi service platforms. Additionally, it implements OSGi R4 EventAdmin service and is able to send RemoteEvents to other peers. It uses jSLP, the pure Java SLP implementation as underlying discovery protocol. Projects using R-OSGi:"/>
	<meta http-equiv="cache-control" content="no-cache"/>
	<meta http-equiv="pragma" content="no-cache"/>
	<meta http-equiv="robots" content="index, follow"/>
<body>
	<section name="What's new in 0.6.x">
	<p>
		The current 0.6.x release of R-OSGi features some major improvements in terms of performance and in the way it is integrated into the OSGi. On the network level, we now feature full modularity allowing to plugin alternative ways of transporting the messages between the peer. 
		Currently, we have an implementation for http(s) that demonstrates this feature and allows to use R-OSGi to connect to machines inside of firewalled networks. 
	</p>
	<p>
		By default, R-OSGi now uses persistent TCP connections for exchanging messages. This leads to a significant improvement of the service invocation times. Furthermore, the way of handling events has fundamentally changed. 
		Events are no longer sent to all peers by multicast but now also use the network channels. Events are forwarded to a connected peer if the peer has a local listener matching the topic of the event. This allows seemless transmission 
		of events and no longer requires any remote-specific registrations for events. 
	</p>
	<p>
		The API has once again changes in some parts to allow better integration into standard OSGi. DiscoveryListeners are now registered for interface class names instead of ServiceURLs, which make them closer related to the way 
		local OSGi services are retrieved from the registry. Furthermore, it is now possible to directly get a fetched service omitting the indirection over the service reference. The lifecycle of 
		the original service and the service proxy are now synchronized: State changes, including property updates, are propagated to connected remote service proxies making the proxies behaving even more like the original service. 
	</p>
	<p>	
		Type injections are now determined automatically by static code analysis. Proxy bundles will include all classes which are required to make the bundle resolvable, no manual injections have to be given.
	</p>
	<p>
		The migration of bundles has not yet been completely implemented in 0.6.x and will be part of future releases. The focus of the 0.6 release was more on improving the proxies and the network transport.
	</p>
	</section>
</body>
</document>