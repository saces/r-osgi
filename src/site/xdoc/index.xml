<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties>
		<title>R-OSGi - transparent OSGi remote extension for distributed services - R-OSGi</title>
		<author email="rellermeyer_AT_inf.ethz.ch">Jan S. Rellermeyer</author>
	</properties>
	<meta name="keyword" content="OSGi, R-OSGi, rosgi, remote, remoting, Java, J2ME, embedded, Event, Service, EventAdmin, Remote Event, RemoteEvent, SLP, Remote services, service discovery, Framework"/>
	<meta name="description" content="R-OSGi provides a transparent way to access services on remote OSGi platforms. Additionally, it can interact with the EventAdmin service to deliver events between distributed frameworks. It uses jSLP, the pure Java SLP implementation as underlying discovery protocol."/>
	<meta http-equiv="cache-control" content="no-cache"/>
	<meta http-equiv="pragma" content="no-cache"/>
	<meta http-equiv="robots" content="index, follow"/>
	<body>
		<section name="Overview">
			<p>
			<b>Current release: 0.6.2</b><br/>
			Fixed some bugs in the proxy generation. Now regards potential inheritance of the service interface.
			</p>
			<p>
        	R-OSGi runs as an OSGi bundle and enables distribution for arbitrary OSGi framework implementations. 
        	It uses SLP as underlying service discovery protocol and maps OSGi services to SLP service URLs of the service type <code>service:osgi</code>. Alternatively, clients can explicitly connect to known service providers.
        </p>
		<p>
        	All that a service provider framework has to do is registering a service for remote access. Subsequently, other peers can discover 
        	the remote service if they have subscribed for this service.
        	They are notified when a service has been discovered and can initiate the fetching of this remote service. 
        	This will cause the service providing framework to transfer the service properties and the service interface
        	to the client machine. The default policy involves the client framework to build a proxy bundle on the fly and register it with the local framework. 
        	Local services can then access the remote service transparently, service method calls are  
			send to the service provider and lead to remote method calls. <br/>
			Since release 0.5.0, the service provider can also decide to register a service with a <i>transfer bundle</i> policy. In this case, the whole bundle 
			is transferred to the client peer.  
		</p>
		<p>		
			R-OSGi uses SLP-style messages for remote invocations and does not rely on heavyweight frameworks like Jini and RMI.  
			This makes it ideal for small and embedded devices with limited memory and network bandwidth. The service runs on every OSGi-minimal compliant environment.
			<br/>R-OSGi has been tested with
			<a href="http://www.knopflerfish.org">Knopflerfish</a> and <a href="http://oscar.objectweb.org">Oscar</a> as well 
			as with our own lightweight OSGi implementation <a href="http://concierge.sourceforge.net">Concierge</a>. 
			Our test platforms include a variety of different devices, hardware architectures and Java VMs. 
		</p>
			<p>
			Additionally, R-OSGi can interact with the EventAdmin service. Frameworks receive all events from connected peers that match one of their EventHandler subscriptions. For R3 frameworks (which do not feature an EventAdmin service), we have implemented an event admin backport as part of <a href="http://concierge.sourceforge.net">Concierge</a>. 
		</p>
			<p>
			In performance measurements, R-OSGi did not only outperform UPnP by an average factor of 280, but also performed even slightly better than RMI for many cases.
		</p>
			<p>
			To see R-OSGi in action, have a look at our <a href="mindstorms.html">Lego Mindstorms Robots</a> being remote-controlled by R-OSGi.		
		</p>
			<p>
			R-OSGi is part of the <a href="http://www.flowsgi.inf.ethz.ch">flowSGi</a> project, which is an ongoing research project at <a href="http://www.pc.inf.ethz.ch">Institute for Pervasive Computing</a>, <a href="http://www.ethz.ch">ETH Zurich</a>.		
		</p>
		<p>
			Thanks to all who attended our talk at EclipseCon 2007: <b><a href="http://www.eclipsecon.org/2007/index.php?page=sub/&amp;id=3661">Services Everywhere: OSGi in Distributed Environments</a></b>. Both the paper and the presentation slides are available on the <a href="http://eclipsezilla.eclipsecon.org/show_bug.cgi?id=3661">Eclipsezilla</a>.<br/>
			<a href="http://www.eclipsecon.org/2007/"><img border="0" heigth="64" width="400" src="http://www.eclipsecon.org/2007/image600x96.gif"/></a>
		</p>
		</section>
	</body>
</document>
