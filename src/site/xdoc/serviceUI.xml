<?xml version="1.0" encoding="UTF-8"?><document>  <properties>		<title>R-OSGi - transparent OSGi remote extension for distributed services - ServiceUI</title>    <author email="rellermeyer_AT_inf.ethz.ch">Jan S. Rellermeyer</author>  </properties>	<meta name="keyword" content="ServiceUI, OSGi, R-OSGi, rosgi, remote, remoting, Java, J2ME, embedded systems, Event, Service, EventAdmin, Remote Event, RemoteEvent, SLP, Remote services, service discovery"/>	<meta name="description" content="R-OSGi ServiceUI for interaction with arbitrary R-OSGi services that have a presentation attached. R-OSGi provides a transparent way to access services on remote OSGi service platforms. Additionally, it implements OSGi R4 EventAdmin service and is able to send RemoteEvents to other peers. It uses jSLP, the pure Java SLP implementation as underlying discovery protocol. ServiceUI:"/>	<meta http-equiv="cache-control" content="no-cache"/>	<meta http-equiv="pragma" content="no-cache"/>	<meta http-equiv="robots" content="index, follow"/><body>	<section name="R-OSGi ServiceUI">		<p>			Generally, a certain amount of common knowledge is required for a client to connect to a service. In common systems, the client has to know at least the service API and the meaning of the provided methods. R-OSGi allows to access services in a way similar to the Jini ServiceUI. Services can additionally register a presentation that is displayed on client devices that have a ServiceUI service running and that have decided to fetch the service. These presentations can be used to give the user direct access to the service without knowing the interface and the semantics of the provided methods.						<center>						<img src="/images/serviceUI-0.3.0.png"/>					</center> 		</p>				<subsection name="Attaching a Presentation to an R-OSGi Service">		<p>			A valid presentation for an R-OSGi service has to implement the interface			<source>public interface ServiceUIComponent {	void initComponent(Object serviceObject, BundleContext context);	Panel getPanel();}</source>and registeres the name of the presentation class as additional property <code>ServiceUIComponent.PRESENTATION_PROPERTY</code>.		</p>		<p>			Example:<source>...Hashtable attributes = new Hashtable();attributes.put(RemoteOSGiService.PRESENTATION, RobotUI.class.getName());reg = context.registerService(RobotDevice.class.getName(), new RobotDeviceImpl(simulated), attributes);            ...</source>								</p>		<p>			The presentation class is automatically injected into the client-generated proxy bundle including all (named and anonymous) inner classes. ServiceUI clients display the presentation if the user connects to the service. The user can switch between presentations of multiple services. Presentations are unique to the service providing host; it is possible to connect to the same service running on multiple hosts. 		</p>		</subsection>		<subsection name="Configuring a ServiceUI Client">		<p>			Simply download the ServiceUI bundle and install it. Service discovery starts immediately, all R-OSGi services that are reachable are displayed in the choice widget at the bottom of the GUI. Selecting one of the discovered services causes R-OSGi to establish a connection to the service and check for an attached presentation. The choice widget at the top of the GUI is used to switch between the presentations of connected services.		</p>		</subsection>			</section></body></document>