<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties>
		<title>
			R-OSGi - transparent OSGi remote extension for distributed
			services - User guide
		</title>
		<author email="rellermeyer_AT_inf.ethz.ch">
			Jan S. Rellermeyer
		</author>
	</properties>
	<meta name="keyword"
		content="User guide, OSGi, R-OSGi, rosgi, remote, remoting, Java, J2ME, embedded systems, Event, Service, EventAdmin, Remote Event, RemoteEvent, SLP, Remote services, service discovery" />
	<meta name="description"
		content="User guide for R-OSGi, the transparent way to access services on remote OSGi service platforms. Additionally, R-OSGi implements OSGi R4 EventAdmin service and is able to send RemoteEvents to other peers. It uses jSLP, the pure Java SLP implementation as underlying discovery protocol." />
	<meta http-equiv="cache-control" content="no-cache" />
	<meta http-equiv="pragma" content="no-cache" />
	<meta http-equiv="robots" content="index, follow" />
	<body>
		<section name="Getting started with R-OSGi">
			<subsection name="Quick Start">
				<p>
					For a quick start, you can download the sample
					client and service distros. They contain a full
					configuration of Concierge, R-OSGi, and an example
					OSGi service that is accessed remotely. For easy
					evaluation of our technology, simply unpack the zips
					and start the client and the service on the same
					machine. The client is preconfigured to expect the
					service on
					<code>localhost:9278</code>
					. If you want to run the example over a real
					network, you can configure the client by setting
					<code>-Dch.ethz.iks.r_osgi.service.uri</code>
					to the remote machine's URI (e.g.,
					<code>r-osgi://godot.inf.ethz.ch:9278</code>
					.
				</p>
			</subsection>
			<subsection name="Creating your own deployment">
				<p>
					First of all, install an OSGi framework
					implementation of your choice. It should be at least
					OSGi R3 compliant. You can use, for instance, our
					own R3 implementation
					<a href="http://concierge.sourceforge.net">
						Concierge
					</a>
					.
					<br />
					Next, download the current version of R-OSGi from a
					<a
						href="http://sourceforge.net/project/showfiles.php?group_id=158382">
						sourceforge mirror
					</a>
					.
					<br />
					If you want to use service discovery, you
					additionally have to download the current version of
					jSLP-OSGi from a
					<a
						href="http://sourceforge.net/project/showfiles.php?group_id=151721">
						sourceforge mirror
					</a>
					and the
					<code>service_discovery.slp</code>
					bundle.
					<br />
					If you plan to use remote events, then you also need
					an EventAdmin implementation. Either your framework
					has one for you, or in case you are using an R3
					framework (EventAdmin came out with R4), you can
					take the backport from Concierge. Due to its
					lightweight architecture, R-OSGi runs on every Java
					VM which implements at least J2ME CDC 1.0.
				</p>
			</subsection>
			<subsection name="The big picture of R-OSGi">
				<p>
					There are two very different use cases for R-OSGi.
					In some settings, you want to have full
					transparency. That means, your application is not
					able to distinguish between local and remote
					services. This is typically the case when you add
					distribution to an existing application.
					<br />
					What you do in these cases is to implement an
					<i>Adapter Bundle</i>
					on client side. This bundle is responsible for
					either starting a connection to the remote host or
					registering a discovery listener and decide to fetch
					services when they are discovered. The application
					itself will be able to operate on the service as if
					it was a local service, because it actually is a
					local service with the only difference that the
					logic resides on a remote machine and all calls to
					service methods are redirected through a remote
					method invocation scheme.
					<br />
					The registration of existing services for remote
					access through surrogate services is described in
					<a href="advanced.htlm">Advanced R-OSGi</a>
					.
				</p>
				<p>
					In some cases, the application is absolutely aware
					of distribution. In fact, the purpose of the
					application is to connect to remote services and
					operate on them. In this situation, the application
					wants to have full control over the connection and
					the access of the remote services.
				</p>
				<p>
					Besides remote access to services, R-OSGi also
					features remote events. Once a remote connection is
					established, Events are forwarded to every connected
					peer that has a local registration of an
					<code>EventHandler</code>
					with matching topics. Thereby, the application are
					able to seamlessly make use of events that occurred
					on a remote machine. If it is required to
					distinguish between local and remote events, this is
					still possible since all forwarded events contain an
					additional property
					<code>sender.uri</code>
					which contains the URI of the peer that forwarded
					the event.
				</p>
			</subsection>
			<subsection
				name="Registering a service for remote access (service provider side)">
				A registration with a proxy policy is done in the
				following way:
				<source>
public class RobotActivator implements
	BundleActivator {

	public void start(BundleContext context) { Hashtable
		
		properties = new Hashtable();

		// this is the hint for R-OSGi that the service 
		// ought to be made available for remote access

		properties.put(RemoteOSGiService.R_OSGi_REGISTRATION,
			Boolean.TRUE);


		context.registerService(RobotDevice.class.getName(),
			new RobotDeviceImpl(), properties); 
	}

	public void stop(BundleContext context) throws
		Exception {

	}

}
				</source>
				Now, other R-OSGi enabled peers can connect to the peer
				and get access to the service.
			</subsection>
			<subsection
				name="Connect to a remote peer and get the service (service consumer side)">
				<p>
					First of all, we have to get the RemoteOSGiService
					and establish a connection to a peer.
					<source>

// get the RemoteOSGiService 
final ServiceReference sref = context.getServiceReference(RemoteOSGiService.class.getName());

if (sref == null) { 
	throw new BundleException("No R-OSGi found"); 
} 

remote = (RemoteOSGiService) context.getService(sref);

// connect 
remote.connect(new URI("r-osgi://fluidpaq1.inf.ethz.ch:9278"));

					</source>
					<br />
					The connect method returns an array of
					<code>RemoteServiceReference</code>
					objects. These are the services which are currently
					available on the remote peer. One can use this
					array, or get a service by one of its interfaces,
					properties, etc. Just like it works in OSGi.
					Example:

					<source>
final RemoteServiceReference[] srefs =
	remote.getServiceReferences(new URI("r-osgi://fluidpaq1.inf.ethz.ch:9278"),
	RobotDevice.class.getName(), null);
					</source>
					<br />
					This remote reference has similar properties as a
					local service reference has. It can be used to
					access the service properties, and it is the key for
					getting access to a service:
					<source>
RobotDevice robot = (RobotDevice) remote.getRemoteService(srefs[0]);
					</source>
					<br />
					With the call of the
					<code>getRemoteService</code>
					method, a local proxy for the remote service is
					created. The service proxy is registered with the
					local service registry and can also be retrieved
					like a normal OSGi service. To get rid of a remote
					service, you can call
					<code>ungetRemoteService</code>
					.
				</p>
			</subsection>
		</section>
	</body>
</document>
